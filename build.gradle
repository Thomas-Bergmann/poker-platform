plugins {
    id 'maven-publish'
    id "io.spring.dependency-management" version "1.1.5"
}

allprojects {
    group = 'de.hatoka.poker'
    version = '1.0.0-LOCAL'

    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'

    repositories {
        // mavenLocal()
        mavenCentral()
        // maven { url "https://s01.oss.sonatype.org/content/repositories/releases" }
	}

    jacoco { toolVersion = '0.8.11' }
}

def versionMicrosoftSqlserverMssqlJdbc="12.7.0.jre11-preview"
def versionGlassfishJersey="3.1.7"
def versionSpringDoc="2.5.0"
def versionJJWT="0.12.5"
def versionJupiter="5.10.2"
def versionJunitPlatform="1.10.1"

subprojects {
    apply plugin: 'java'

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    // need to exclude to avoid Class path containing multiple SLF4J bindings
    configurations {
        all.collect { configuration ->
            configuration.exclude group: 'org.slf4j', module: 'slf4j-simple'
        }
    }

    apply plugin: 'io.spring.dependency-management'
    dependencies {
        dependencyManagement {
            imports { mavenBom("org.springframework.boot:spring-boot-dependencies:3.2.5") }
            importedProperties['javax-jaxb.version']

            dependencies {
                dependency "org.springdoc:springdoc-openapi-starter-webmvc-api:${versionSpringDoc}"
                dependency "org.springdoc:springdoc-openapi-starter-webmvc-ui:${versionSpringDoc}"

                dependency 'com.nimbusds:nimbus-jose-jwt:9.37.3'

                dependency "net.logstash.logback:logstash-logback-encoder:7.4"

                dependency 'de.hatoka.neuralnetwork:neuralnetwork:2.0.0'

                dependency "org.glassfish.jersey.core:jersey-client:${versionGlassfishJersey}"
                dependency "org.glassfish.jersey.core:jersey-common:${versionGlassfishJersey}"
                dependency "org.glassfish.jersey.inject:jersey-hk2:${versionGlassfishJersey}"
                dependency "org.glassfish.jersey.media:jersey-media-json-jackson:${versionGlassfishJersey}"
                dependency 'org.json:json:20240303'

                dependency 'jakarta.validation:jakarta.validation-api:3.0.2'
                dependency 'jakarta.ws.rs:jakarta.ws.rs-api:3.1.0'

                dependency "io.jsonwebtoken:jjwt-api:${versionJJWT}"
                dependency "io.jsonwebtoken:jjwt-impl:${versionJJWT}"
                dependency "io.jsonwebtoken:jjwt-jackson:${versionJJWT}"

                dependency "org.liquibase:liquibase-core:4.25.0"
                dependency 'info.picocli:picocli:4.7.5'
                dependency "com.microsoft.sqlserver:mssql-jdbc:${versionMicrosoftSqlserverMssqlJdbc}"

                dependency "org.junit.jupiter:junit-jupiter:${versionJupiter}"
                dependency "org.junit.jupiter:junit-jupiter-api:${versionJupiter}"
                dependency "org.junit.jupiter:junit-jupiter-engine:${versionJupiter}"
                dependency "org.junit.jupiter:junit-jupiter-params:${versionJupiter}"
                dependency "org.junit.platform:junit-platform-engine:${versionJunitPlatform}"
                dependency "org.junit.platform:junit-platform-commons:${versionJunitPlatform}"
            }
        }
    }

    test {
        useJUnitPlatform {
            excludeEngines 'junit-vintage'
        }
    }

    jacocoTestReport {
        reports {
            csv.required = false
            xml.required = true
            html.required = true
            html.outputLocation = project.layout.buildDirectory.dir("reports/jacoco/html")
        }
    }

    jar {
        manifest {
            attributes 'Implementation-Title': name,
                   'Implementation-Version': project.version
        }
    }
}

repositories {
    mavenCentral()
}

// based on http://www.jroller.com/aalmiray/entry/gradle_glam_jacoco_coveralls
task jacocoReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.jacocoTestReport
    reports {
        csv.required = false
        xml.required = false
        html.required = true
        html.outputLocation = project.layout.buildDirectory.dir("reports/jacoco/html")
    }
}
