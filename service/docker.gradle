buildscript {
    repositories.mavenCentral()
    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:6.7.0'
        classpath 'com.avast.gradle:gradle-docker-compose-plugin:0.14.5'
    }
}

apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin
apply plugin: com.avast.gradle.dockercompose.DockerComposePlugin

import java.nio.file.Files
import java.nio.file.StandardCopyOption
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import org.gradle.internal.os.OperatingSystem

def getConfigurationProperty = {env, prop, defaultValue=null ->
   def value = project.hasProperty(prop) ? properties[prop] : System.env[env]

   if (value == null && defaultValue == null) logger.warn("neither $env nor $prop is defined")

   value != null ? value : defaultValue
}

def containerRegistry = getConfigurationProperty('CONTAINER_REGISTRY', 'container.registry', 'local')
def containerImageName = "$containerRegistry/hatoka/poker-service"

def dockerDir = new File(buildDir, 'docker')
def dockerEnvFile = new File(dockerDir, 'service.env')

docker {
    url = OperatingSystem.current().isWindows()  ? 'http://localhost:2375' : (System.getenv('DOCKER_HOST_URL') ?: 'unix:///var/run/docker.sock').replace('tcp', 'https')
}

task copyJar(type: Copy) {
    group = 'Docker'
    description "Helper task for copying the jar into the docker build folder."

    from 'build/libs'
    into new File(dockerDir,"/libs")
    include '*.jar'

    dependsOn bootJar
}

task copyScripts(type: Copy) {
    group = 'Docker'
    description "Helper task for copying scripts into the docker build folder."

    from 'src/main/docker'
    into new File(dockerDir,"/bin")
    include '*.sh'
}

task copyDockerfile(type: Copy) {
    group = 'Docker'
    description "Helper task for copy Dockerfile into docker build folder."

    from 'src/main/docker'
    into dockerDir
    include 'Dockerfile'
}

task buildImage(type: DockerBuildImage) {
    group = 'Docker'
    description "Generates the docker image."
    dependsOn copyDockerfile
    dependsOn copyJar
    dependsOn copyScripts

    inputDir = dockerDir
    images.add("$containerImageName:latest")
}

